import threading
import time
import random

# Mutex para sincronização
mutex = threading.Lock()

# Variáveis compartilhadas
barber_is_sleeping = True
customer_is_waiting = False

def barber():
    global barber_is_sleeping, customer_is_waiting
    while True:
        with mutex:
            if customer_is_waiting:
                barber_is_sleeping = False
                print("Barbeiro está acordando e cortando o cabelo do cliente.")
                customer_is_waiting = False
                time.sleep(random.uniform(1, 3)) # Simula o tempo de corte de cabelo
                print("Barbeiro terminou de cortar o cabelo do cliente.")
                barber_is_sleeping = True
            else:
                print("Barbeiro está dormindo.")
        time.sleep(random.uniform(1, 3)) # Simula o tempo de sono do barbeiro

def customer():
    global barber_is_sleeping, customer_is_waiting
    while True:
        with mutex:
            if not barber_is_sleeping:
                print("Cliente está esperando o barbeiro cortar o cabelo.")
                customer_is_waiting = True
                barber_is_sleeping = True
            else:
                print("Cliente está cortando o cabelo sozinho.")
        time.sleep(random.uniform(1, 3)) # Simula o tempo de espera do cliente

if __name__ == "__main__":
    barber_thread = threading.Thread(target=barber)
    customer_thread = threading.Thread(target=customer)

    barber_thread.start()
    customer_thread.start()

    barber_thread.join()
    customer_thread.join()
